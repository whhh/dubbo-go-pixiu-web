{
  "filename": "demo1.md",
  "__html": "<h1 id=\"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\">快速开始 <a class=\"header-anchor\" href=\"#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\">#</a></h1>\n<p>通过一个 <code>hellowworld</code> 例子带领大家快速上手Dubbo-go框架。</p>\n<p>协议：Dubbo<br>\n编码：Hessian2<br>\n注册中心：Zookeeper</p>\n<h2 id=\"%E7%8E%AF%E5%A2%83\">环境 <a class=\"header-anchor\" href=\"#%E7%8E%AF%E5%A2%83\">#</a></h2>\n<ul>\n<li>Go编程环境</li>\n<li>启动zookeeper服务，也可以使用远程实例</li>\n</ul>\n<h2 id=\"%E4%BB%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%A7%8B\">从服务端开始 <a class=\"header-anchor\" href=\"#%E4%BB%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%A7%8B\">#</a></h2>\n<h3 id=\"%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E7%BC%96%E5%86%99-provider-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%8F%90%E4%BE%9B%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%96%B9%E6%B3%95\">第一步：编写 <code>Provider</code> 结构体和提供服务的方法 <a class=\"header-anchor\" href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E7%BC%96%E5%86%99-provider-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%8F%90%E4%BE%9B%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%96%B9%E6%B3%95\">#</a></h3>\n<blockquote>\n<p><a href=\"https://github.com/dubbogo/dubbo-samples/blob/master/golang/helloworld/dubbo/go-server/app/user.go\">https://github.com/dubbogo/dubbo-samples/blob/master/golang/helloworld/dubbo/go-server/app/user.go</a></p>\n</blockquote>\n<ol>\n<li>编写需要被编码的结构体，由于使用 <code>Hessian2</code> 作为编码协议，<code>User</code> 需要实现 <code>JavaClassName</code> 方法，它的返回值在dubbo中对应User类的类名。</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> User <span class=\"hljs-keyword\">struct</span> {\n\tId   <span class=\"hljs-keyword\">string</span>\n\tName <span class=\"hljs-keyword\">string</span>\n\tAge  <span class=\"hljs-keyword\">int32</span>\n\tTime time.Time\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(u User)</span> <span class=\"hljs-title\">JavaClassName</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"com.ikurento.user.User\"</span>\n}\n</code></pre>\n<ol start=\"2\">\n<li>编写业务逻辑，<code>UserProvider</code> 相当于dubbo中的一个服务实现。需要实现 <code>Reference</code> 方法，返回值是这个服务的唯一标识，对应dubbo的 <code>beans</code> 和 <code>path</code> 字段。</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> UserProvider <span class=\"hljs-keyword\">struct</span> {\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(u *UserProvider)</span> <span class=\"hljs-title\">GetUser</span><span class=\"hljs-params\">(ctx context.Context, req []<span class=\"hljs-keyword\">interface</span>{})</span> <span class=\"hljs-params\">(*User, error)</span></span> {\n\t<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"req:%#v\"</span>, req)\n\trsp := User{<span class=\"hljs-string\">\"A001\"</span>, <span class=\"hljs-string\">\"hellowworld\"</span>, <span class=\"hljs-number\">18</span>, time.Now()}\n\t<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"rsp:%#v\"</span>, rsp)\n\t<span class=\"hljs-keyword\">return</span> &amp;rsp, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(u *UserProvider)</span> <span class=\"hljs-title\">Reference</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"UserProvider\"</span>\n}\n</code></pre>\n<ol start=\"3\">\n<li>注册服务和对象</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n\tconfig.SetProviderService(<span class=\"hljs-built_in\">new</span>(UserProvider))\n\t<span class=\"hljs-comment\">// ------for hessian2------</span>\n\thessian.RegisterPOJO(&amp;User{})\n}\n</code></pre>\n<h3 id=\"%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E7%BC%96%E5%86%99%E4%B8%BB%E7%A8%8B%E5%BA%8F\">第二步：编写主程序 <a class=\"header-anchor\" href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E7%BC%96%E5%86%99%E4%B8%BB%E7%A8%8B%E5%BA%8F\">#</a></h3>\n<blockquote>\n<p><a href=\"https://github.com/dubbogo/dubbo-samples/blob/master/golang/helloworld/dubbo/go-server/app/server.go\">https://github.com/dubbogo/dubbo-samples/blob/master/golang/helloworld/dubbo/go-server/app/server.go</a></p>\n</blockquote>\n<ol>\n<li>引入必需的dubbo-go包</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">import</span> (\n\thessian <span class=\"hljs-string\">\"github.com/apache/dubbo-go-hessian2\"</span>\n\t<span class=\"hljs-string\">\"github.com/apache/dubbo-go/config\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/registry/protocol\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/common/proxy/proxy_factory\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/filter/impl\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/cluster/cluster_impl\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/cluster/loadbalance\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/registry/zookeeper\"</span>\n\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/protocol/dubbo\"</span>\n)\n\n</code></pre>\n<ol start=\"2\">\n<li>main 函数</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tconfig.Load()\n}\n</code></pre>\n<h3 id=\"%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E7%BC%96%E5%86%99%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\">第三步：编写配置文件并配置环境变量 <a class=\"header-anchor\" href=\"#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E7%BC%96%E5%86%99%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\">#</a></h3>\n<ol>\n<li>参考 <a href=\"https://github.com/dubbogo/dubbo-samples/blob/master/golang/helloworld/dubbo/go-server/profiles/release/log.yml\">log</a> 和 <a href=\"https://github.com/dubbogo/dubbo-samples/blob/master/golang/helloworld/dubbo/go-server/profiles/release/server.yml\">server</a> 编辑配置文件。</li>\n</ol>\n<p>主要编辑以下部分：</p>\n<ul>\n<li>\n<p><code>registries</code> 结点下需要配置zk的数量和地址</p>\n</li>\n<li>\n<p><code>services</code> 结点下配置服务的具体信息，需要配置 <code>interface</code> 配置，修改为对应服务的接口名，服务的key对应第一步中 <code>Provider</code> 的 <code>Reference</code> 返回值</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>把上面的两个配置文件分别配置为环境变量</li>\n</ol>\n<pre><code class=\"language-shell\">export CONF_PROVIDER_FILE_PATH=\"xxx\"\nexport APP_LOG_CONF_FILE=\"xxx\"\n</code></pre>\n<h2 id=\"%E6%8E%A5%E7%9D%80%E6%98%AF%E5%AE%A2%E6%88%B7%E7%AB%AF\">接着是客户端 <a class=\"header-anchor\" href=\"#%E6%8E%A5%E7%9D%80%E6%98%AF%E5%AE%A2%E6%88%B7%E7%AB%AF\">#</a></h2>\n<h3 id=\"%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E7%BC%96%E5%86%99%E5%AE%A2%E6%88%B7%E7%AB%AF-provider\">第一步：编写客户端 <code>Provider</code> <a class=\"header-anchor\" href=\"#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E7%BC%96%E5%86%99%E5%AE%A2%E6%88%B7%E7%AB%AF-provider\">#</a></h3>\n<blockquote>\n<p><a href=\"https://github.com/dubbogo/dubbo-samples/blob/master/golang/helloworld/dubbo/go-client/app/user.go\">https://github.com/dubbogo/dubbo-samples/blob/master/golang/helloworld/dubbo/go-client/app/user.go</a></p>\n</blockquote>\n<ol>\n<li>\n<p>参考服务端第一步的第一点。</p>\n</li>\n<li>\n<p>与服务端不同的是，提供服务的方法作为结构体的参数，不需要编写具体业务逻辑。另外，<code>Provider</code> 不对应dubbo中的接口，而是对应一个实现。</p>\n</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">type</span> UserProvider <span class=\"hljs-keyword\">struct</span> {\n\tGetUser <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, req []<span class=\"hljs-keyword\">interface</span>{}, rsp *User)</span> <span class=\"hljs-title\">error</span></span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(u *UserProvider)</span> <span class=\"hljs-title\">Reference</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"UserProvider\"</span>\n}\n</code></pre>\n<ol start=\"3\">\n<li>注册服务和对象</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n\tconfig.SetConsumerService(userProvider)\n\thessian.RegisterPOJO(&amp;User{})\n}\n</code></pre>\n<h3 id=\"%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E7%BC%96%E5%86%99%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%BB%E7%A8%8B%E5%BA%8F\">第二步：编写客户端主程序 <a class=\"header-anchor\" href=\"#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E7%BC%96%E5%86%99%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%BB%E7%A8%8B%E5%BA%8F\">#</a></h3>\n<blockquote>\n<p><a href=\"https://github.com/dubbogo/dubbo-samples/blob/master/golang/helloworld/dubbo/go-client/app/client.go\">https://github.com/dubbogo/dubbo-samples/blob/master/golang/helloworld/dubbo/go-client/app/client.go</a></p>\n</blockquote>\n<ol>\n<li>引入必需的dubbo-go包</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">import</span> (\n\thessian <span class=\"hljs-string\">\"github.com/apache/dubbo-go-hessian2\"</span>\n\t<span class=\"hljs-string\">\"github.com/apache/dubbo-go/config\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/registry/protocol\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/common/proxy/proxy_factory\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/filter/impl\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/cluster/cluster_impl\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/cluster/loadbalance\"</span>\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/registry/zookeeper\"</span>\n\n\t_ <span class=\"hljs-string\">\"github.com/apache/dubbo-go/protocol/dubbo\"</span>\n)\n</code></pre>\n<ol start=\"2\">\n<li>main 函数</li>\n</ol>\n<pre><code class=\"language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\tconfig.Load()\n\ttime.Sleep(<span class=\"hljs-number\">3e9</span>)\n\n\t<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"\\n\\n\\nstart to test dubbo\"</span>)\n\tuser := &amp;User{}\n\terr := userProvider.GetUser(context.TODO(), []<span class=\"hljs-keyword\">interface</span>{}{<span class=\"hljs-string\">\"A001\"</span>}, user)\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t}\n\t<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"response result: %v\\n\"</span>, user)\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">println</span><span class=\"hljs-params\">(format <span class=\"hljs-keyword\">string</span>, args ...<span class=\"hljs-keyword\">interface</span>{})</span></span> {\n\tfmt.Printf(<span class=\"hljs-string\">\"\\033[32;40m\"</span>+format+<span class=\"hljs-string\">\"\\033[0m\\n\"</span>, args...)\n}\n</code></pre>\n<h3 id=\"%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E7%BC%96%E5%86%99%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-1\">第三步：编写配置文件并配置环境变量 <a class=\"header-anchor\" href=\"#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E7%BC%96%E5%86%99%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F-1\">#</a></h3>\n<ol>\n<li>参考 <a href=\"https://github.com/dubbogo/dubbo-samples/blob/master/golang/helloworld/dubbo/go-client/profiles/release/log.yml\">log</a> 和 <a href=\"https://github.com/dubbogo/dubbo-samples/blob/master/golang/helloworld/dubbo/go-client/profiles/release/client.yml\">client</a> 编辑配置文件。</li>\n</ol>\n<p>主要编辑以下部分：</p>\n<ul>\n<li>\n<p><code>registries</code> 结点下需要配置zk的数量和地址</p>\n</li>\n<li>\n<p><code>references</code> 结点下配置服务的具体信息，需要配置 <code>interface</code> 配置，修改为对应服务的接口名，服务的key对应第一步中 <code>Provider</code> 的 <code>Reference</code> 返回值</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>把上面的两个配置文件费别配置为环境变量，为防止log的环境变量和服务端的log环境变量冲突，建议所有的环境变量不要做全局配置，在当前起效即可。</li>\n</ol>\n<pre><code class=\"language-shell\">export CONF_CONSUMER_FILE_PATH=\"xxx\"\nexport APP_LOG_CONF_FILE=\"xxx\"\n</code></pre>\n",
  "link": "\\zh-cn\\docs\\demo1.html",
  "meta": {
    "title": "快速开始",
    "keywords": "快速开始, hellowworld, Provider",
    "description": "快速上手dubbo-go，编写一个简单的hellowworld应用"
  }
}